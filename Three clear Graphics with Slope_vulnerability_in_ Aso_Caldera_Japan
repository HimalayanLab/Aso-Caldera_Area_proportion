# Install packages
!pip -q install rasterio numpy matplotlib

import numpy as np
import rasterio
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
from google.colab import files

# --- Upload DEM ---
from google.colab import drive
drive.mount('/content/drive')

# Path to DEM in Google Drive (update to your file path)
dem_path = "/content/drive/MyDrive/Colab Notebooks/pr_fill_clipped.tif"

with rasterio.open(dem_path) as src:
    Z = src.read(1, masked=True).filled(-9999) # Changed fill_value to -9999
    transform = src.transform
    res_x = transform.a
    res_y = -transform.e
    nx = src.width
    ny = src.height

# --- Compute Slope & Aspect ---
# Ensure Z is float for gradient computation if it contains fill value
Z_float = Z.astype(float)
Z_float[Z == -9999] = np.nan # Convert fill value back to NaN for gradient if needed

gy, gx = np.gradient(Z_float, abs(res_y), abs(res_x))
slope = np.degrees(np.arctan(np.hypot(gx, gy)))
aspect = (np.degrees(np.arctan2(gx, -gy)) + 360) % 360

# --- Define slope classes and aspect masks ---
vulnerability = np.zeros_like(Z)

# Conditions for aspects (S, SE, SW)
aspect_condition = (
    ((aspect >= 112.5) & (aspect < 157.5)) |  # SE
    ((aspect >= 157.5) & (aspect < 202.5)) |  # S
    ((aspect >= 202.5) & (aspect < 247.5))    # SW
)

# Classify based on slope and aspect
vulnerability[(slope >= 25) & (slope < 30) & aspect_condition] = 1
vulnerability[(slope >= 30) & (slope < 45) & aspect_condition] = 2
vulnerability[(slope >= 45) & (slope <= 60) & aspect_condition] = 3

# --- Generate Hillshade ---
azimuth = 315.0
altitude = 45.0
azimuth_rad = np.radians(azimuth)
altitude_rad = np.radians(altitude)

slope_rad = np.radians(slope)
aspect_rad = np.radians(aspect)

hs = np.sin(altitude_rad) * np.sin(slope_rad) + \
     np.cos(altitude_rad) * np.cos(slope_rad) * \
     np.cos(azimuth_rad - aspect_rad)
hillshade = 255 * (hs + 1) / 2  # Normalize to 0â€“255

# --- Plot Composition ---
fig, ax = plt.subplots(figsize=(10, 8))

# Base hillshade
ax.imshow(hillshade, cmap='gray', extent=(0, nx*res_x, 0, ny*res_y), alpha=0.5)

# Vulnerability classes overlay
cmap_vulnerability = ListedColormap(['none','yellow','orange','red'])
ax.imshow(vulnerability, cmap=cmap_vulnerability,
          extent=(0, nx*res_x, 0, ny*res_y), alpha=0.6)

# 100 m contours
contour_levels = np.arange(np.nanmin(Z), np.nanmax(Z), 100)
ax.contour(Z, levels=contour_levels, colors='black', linewidths=0.5,
           extent=(0, nx*res_x, 0, ny*res_y))

ax.set_title("Slope Vulnerability Classes + 100m Contours + Hillshade", fontsize=14)
ax.set_xlabel("X (m)")
ax.set_ylabel("Y (m)")

plt.show()
